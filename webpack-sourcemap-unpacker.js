#!/usr/bin/env node

const path = require('path');
const fse = require('fs-extra');
const glob = require('glob');
const SourceMapConsumer = require('source-map').SourceMapConsumer;
const program = require('commander');
const config = require('./package.json');

program.version(config.version, '-v, --version').
    description('Unpack the sourcemaps generated by Webpack to a project folder').
    usage('[options]').
    option('-i, --input [glob-pattern]',
        'a glob patterns to describe sourcemap files to be unpacked, default to *.map').
    option('-o, --output [folder]', 'set the output folder, default to current folder');

program.action((options) => {
    options.input = options.input || '*.map';
    options.output = options.output || '.';
    let files = glob.sync(options.input);
    if (!files.length) {
        console.warn(`There is no ${options.input} in current directory`);
        return;
    }
    console.info(`output src to ${options.output}`);
    files.forEach(async function(filepath) {
        console.info(`extract sourcemap: ${filepath}`);
        const mapSource = fse.readFileSync(path.resolve(filepath));
        const consumer = await new SourceMapConsumer(mapSource.toString());
        const paths = consumer._absoluteSources;
        const sources = consumer.sourcesContent;
        paths.forEach((p, idx) => {
            const parts = p.match(/webpack:\/\/\/([0-9a-zA-Z_/.\-]+?)(\?\w{4})?$/);
            if (!parts || parts[2]) {
                // ignore special path
                // ignore filename ends with hash
                console.log(`ignore file: ${p}`);
                return;
            }

            const folder = path.resolve(path.join(options.output, path.dirname(parts[1])));
            const filename = path.basename(parts[1]);
            const abs = path.resolve(path.join(folder, filename));
            fse.ensureDirSync(folder);
            console.info(`output to file: ${abs}`);
            fse.writeFileSync(abs, sources[idx]);
        });
    });
});

program.parse(process.argv);
